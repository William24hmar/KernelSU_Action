name: Build Kernel (Lunaris AOSP Android 16)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
    - uses: actions/checkout@v4

    - name: Prepare Configuration
      run: |
        # (original behavior: reads CONFIG_ENV and exports many vars into GITHUB_ENV)
        CONFIG_ENV=$(cat config.env | grep -w "CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)
        echo "KERNEL_SOURCE=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_CONFIG=$(cat $CONFIG_ENV | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNEL_IMAGE_NAME=$(cat $CONFIG_ENV | grep -w "KERNEL_IMAGE_NAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ARCH=$(cat $CONFIG_ENV | grep -w "ARCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_LOCALVERSION_TO_FILENAME=$(cat $CONFIG_ENV | grep -w "ADD_LOCALVERSION_TO_FILENAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "EXTRA_CMDS=$(cat $CONFIG_ENV | grep -w "EXTRA_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_CLANG=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_CLANG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_CMDS=$(cat $CONFIG_ENV | grep -w "CUSTOM_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
        echo "CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CLANG_VERSION=$(cat $CONFIG_ENV | grep -w "CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_GCC_ARM64=$(cat $CONFIG_ENV | grep -w "ENABLE_GCC_ARM64" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_GCC_ARM32=$(cat $CONFIG_ENV | grep -w "ENABLE_GCC_ARM32" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_GCC_64=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_GCC_64" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_64_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_GCC_32=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_GCC_32" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_GCC_32_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU=$(cat $CONFIG_ENV | grep -w "ENABLE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KERNELSU_TAG=$(cat $CONFIG_ENV | grep -w "KERNELSU_TAG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_KPROBES_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_KPROBES_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE-LTO=$(cat $CONFIG_ENV | grep -w "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ADD_OVERLAYFS_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_OVERLAYFS_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "DISABLE_CC_WERROR=$(cat $CONFIG_ENV | grep -w "DISABLE_CC_WERROR" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "APPLY_KSU_PATCH=$(cat $CONFIG_ENV | grep -w "APPLY_KSU_PATCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "USE_CUSTOM_ANYKERNEL3=$(cat $CONFIG_ENV | grep -w "USE_CUSTOM_ANYKERNEL3" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_ANYKERNEL3_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_ANYKERNEL3_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "CUSTOM_ANYKERNEL3_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_ANYKERNEL3_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "ENABLE_CCACHE=$(cat $CONFIG_ENV | grep -w "ENABLE_CCACHE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "NEED_DTBO=$(cat $CONFIG_ENV | grep -w "NEED_DTBO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "BUILD_BOOT_IMG=$(cat $CONFIG_ENV | grep -w "BUILD_BOOT_IMG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "SOURCE_BOOT_IMAGE=$(cat $CONFIG_ENV | grep -w "SOURCE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KSU_EXPECTED_SIZE=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_SIZE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "KSU_EXPECTED_HASH=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_HASH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
        echo "REMOVE_UNUSED_PACKAGES=$(cat $CONFIG_ENV | grep -w "REMOVE_UNUSED_PACKAGES" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV

    - name: Setup build kernel environment (install system deps)
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo '${{ env.KERNEL_CONFIG }}' | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install -y \
            git ccache automake flex lzop bison gperf build-essential \
            zip curl zlib1g-dev g++-multilib libxml2-utils \
            bzip2 libbz2-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool \
            make optipng maven libssl-dev pwgen libswitch-perl \
            policycoreutils minicom libxml-sax-base-perl libxml-simple-perl \
            bc libc6-dev-i386 libx11-dev libgl1-mesa-dev xsltproc unzip \
            device-tree-compiler python3 python-is-python2 libncurses-dev
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Sync Lunaris/AOSP prebuilts (clang, mkbootimg, build_make)
      # this is the important bit: repo init + local_manifest to only sync required projects
      run: |
        # install repo tool
        mkdir -p ~/bin
        curl -sS -o ~/bin/repo https://storage.googleapis.com/git-repo-downloads/repo
        chmod a+x ~/bin/repo
        export PATH=$HOME/bin:$PATH

        # prepare a temporary manifest workspace (we don't need the whole tree)
        mkdir -p $GITHUB_WORKSPACE/lunaris_manifest
        cd $GITHUB_WORKSPACE/lunaris_manifest

        # init Lunaris manifest (Android 16)
        repo init -u https://github.com/Lunaris-AOSP/android -b 16 || repo init -u https://github.com/Lunaris-AOSP/android -b 16 --depth=1

        # create a local manifest to only pull prebuilts/clang and Lunaris mkbootimg/build_make
        mkdir -p .repo/local_manifests
        cat > .repo/local_manifests/prebuilts.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <remote name="lunaris" fetch="https://github.com/Lunaris-AOSP/"/>
  <remote name="aosp"    fetch="https://android.googlesource.com/"/>
  <project path="prebuilts/clang/host/linux-x86" name="platform/prebuilts/clang/host/linux-x86" remote="aosp" revision="${CLANG_BRANCH}" />
  <project path="system/tools/mkbootimg" name="system_tools_mkbootimg" remote="lunaris" revision="master" />
  <project path="build/make" name="build_make" remote="lunaris" revision="master" />
</manifest>
EOF

        # sync only those projects (faster than full sync)
        repo sync prebuilts/clang/host/linux-x86 system/tools/mkbootimg build/make -j4 --no-tags --no-clone-bundle || repo sync prebuilts/clang/host/linux-x86 system/tools/mkbootimg build/make -j2

        # move synced pieces into kernel_workspace for later steps
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        if [ -d prebuilts ]; then mv prebuilts $GITHUB_WORKSPACE/kernel_workspace/ || true; fi
        if [ -d system ]; then mv system $GITHUB_WORKSPACE/kernel_workspace/ || true; fi
        if [ -d build ]; then mv build $GITHUB_WORKSPACE/kernel_workspace/ || true; fi

    - name: Setup AOSP clang env (from synced prebuilts)
      run: |
        # find the clang folder (clang-rXXXXX)
        CLANG_BASE="$GITHUB_WORKSPACE/kernel_workspace/prebuilts/clang/host/linux-x86"
        if [ -d "$CLANG_BASE" ]; then
          CLANG_DIR=$(ls -1 $CLANG_BASE | grep -E '^clang' | head -n1 || true)
          if [ -n "$CLANG_DIR" ]; then
            full="$CLANG_BASE/$CLANG_DIR"
            echo "AOSP_CLANG_DIR=$full" >> $GITHUB_ENV
            echo "PATH=$full/bin:$PATH" >> $GITHUB_ENV
            echo "CLANG_BIN_FOUND=true" >> $GITHUB_ENV
            echo "Found clang at: $full"
          else
            echo "No clang folder found in $CLANG_BASE" && exit 1
          fi
        else
          echo "$CLANG_BASE not present; aborting" && exit 1
        fi

    - name: Download mkbootimg tools (fallback to Lunaris repo if not synced)
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ -d system/tools/mkbootimg ]; then
          # use the repo-synced mkbootimg
          cp -r system/tools/mkbootimg tools
        else
          # fallback to Lunaris GitHub mkbootimg
          git clone https://github.com/Lunaris-AOSP/system_tools_mkbootimg.git tools --depth=1
        fi

    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1
        if [[ ${{ env.ADD_LOCALVERSION_TO_FILENAME }} == 'true' ]]; then
          echo "LOCALVERSION=$(cat android-kernel/localversion)" >> $GITHUB_ENV
        else
          echo "LOCALVERSION=" >> $GITHUB_ENV
        fi

    - name: Download source boot image
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.SOURCE_BOOT_IMAGE }} == *.gz ]]; then
            wget -O boot-source.img.gz ${{ env.SOURCE_BOOT_IMAGE }}
            echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
            gunzip boot-source.img.gz
        else
            wget -O boot-source.img ${{ env.SOURCE_BOOT_IMAGE }}
        fi
        if [ -f boot-source.img ]; then
            echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
            echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
        fi

    # ----- KernelSU, config tweaks and the rest of your original steps kept -----
    - name: Setup KernelSU
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        echo "Setting up KernelSU with tag: ${{ env.KERNELSU_TAG }}"
        rm -rf KernelSU drivers/kernelsu
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}
        if [ ! -d "KernelSU" ] || [ ! -d "drivers/kernelsu" ]; then
            echo "ERROR: KernelSU setup failed!"
            exit 1
        fi
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "UPLOADNAME=-KernelSU_$KSU_VERSION" >> $GITHUB_ENV
        echo "KernelSU version: $KSU_VERSION"

    - name: Setup Configuration for Kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        sed -i 's/CONFIG_QCA_CLD_WLAN=m/CONFIG_QCA_CLD_WLAN=y/g' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        sed -i 's/CONFIG_MODULE_UNLOAD=y/CONFIG_MODULE_UNLOAD=m/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_MODULE_FORCE_LOAD=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        if [ ${{ env.APPLY_KSU_PATCH }} = true ]; then
            bash $GITHUB_WORKSPACE/patches/patches.sh
            if grep -q "CONFIG_KSU" arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}; then
                sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/g' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
                sed -i 's/CONFIG_KSU=n/CONFIG_KSU=y/g' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            else
                echo "CONFIG_KSU=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            fi
        fi
        if [ ${{ env.ADD_OVERLAYFS_CONFIG }} = true ]; then
            echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.DISABLE-LTO }} = true ]; then
            sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.DISABLE_CC_WERROR }} = true ]; then
            echo "CONFIG_CC_WERROR=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi

    - name: Setup ccache
      if: env.ENABLE_CCACHE == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-${{ env.DEVICE }}${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}
        max-size: 2G

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel

        # prefer the synced AOSP clang if present
        if [ "${{ env.CLANG_BIN_FOUND }}" = "true" ]; then
            echo "Using AOSP clang from: $AOSP_CLANG_DIR"
            export PATH="$AOSP_CLANG_DIR/bin:$PATH"
        elif [ ${{ env.USE_CUSTOM_CLANG }} = true ]; then
            export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        else
            # fallback to packaged clang (if provided in repo)
            export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang/bin:$PATH
        fi

        # build (same flags as before)
        make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} ${{ env.CUSTOM_CMDS }} AR=llvm-ar NM=llvm-nm \
            OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size \
            STRIP=llvm-strip HOSTCC=clang HOSTCXX=clang++ ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ env.KERNEL_CONFIG }}

    - name: Check kernel output files
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} ]; then
           echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
        else
           echo "Kernel output file is empty"
           exit 1
        fi
        if [ ${{ env.NEED_DTBO }} = true ]; then
           if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img ]; then
               echo "CHECK_DTBO_IS_OK=true" >> $GITHUB_ENV
           else
               echo "DTBO image is empty"
               exit 1
           fi
        fi

    - name: Make boot image
      if: env.HAVE_SOURCE_BOOT_IMAGE == 'true' && env.CHECK_FILE_IS_OK == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        tools/unpack_bootimg.py --boot_img boot-source.img
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} out/kernel
        tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
        if [ -f boot.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "Boot image is empty"
            exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: boot${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/boot.img
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
